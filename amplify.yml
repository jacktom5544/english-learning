version: 1
frontend:
  phases:
    preBuild:
      commands:
        - npm install
        - npm install autoprefixer postcss @tailwindcss/postcss tailwindcss --save
        - npm install --save-dev typescript @types/react @types/react-dom @types/node
        # Explicitly create a symbolic link to help with module resolution
        - mkdir -p node_modules/@
        - ln -sf $(pwd)/src node_modules/@/
        # Create a minimal tsconfig for the build process
        - echo '{"compilerOptions":{"target":"es5","lib":["dom","dom.iterable","esnext"],"allowJs":true,"skipLibCheck":true,"strict":false,"noEmit":true,"esModuleInterop":true,"module":"esnext","moduleResolution":"node","resolveJsonModule":true,"isolatedModules":true,"jsx":"preserve","incremental":true,"plugins":[{"name":"next"}],"paths":{"@/*":["./src/*"]}},"include":["next-env.d.ts","**/*.ts","**/*.tsx",".next/types/**/*.ts"],"exclude":["node_modules"]}' > tsconfig.json
    build:
      commands:
        # Ensure environment variables are in .env.local which Next.js reads by default
        - if [ -f ".env" ]; then cp .env .env.local; fi
        # Use the original build:amplify script which skips TypeScript checks
        - npm run build:amplify
  artifacts:
    baseDirectory: .next
    files:
      - '**/*'
  cache:
    paths:
      - node_modules/**/*
      - .next/cache/**/* 