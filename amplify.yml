version: 1
# Specify Node.js version
nodejs: 18
frontend:
  phases:
    preBuild:
      commands:
        # Clean slate install
        - rm -rf node_modules
        - rm -f package-lock.json
        - npm cache clean --force
        # Use npm install instead of ci since lock file was removed
        - npm install
        - npm install --save-dev typescript @types/react @types/react-dom
        # Set a NODE_PATH environment variable to help resolve module paths
        - export NODE_PATH=./src
        # Create a temporary next.config.js to ensure standalone output
        - |
          cat > next.config.js <<EOL
          /** @type {import('next').NextConfig} */
          const path = require('path');
          
          const nextConfig = {
            output: 'standalone',
            webpack: (config) => {
              config.resolve.alias = {
                ...config.resolve.alias,
                '@': path.resolve(__dirname, './src'),
              };
              return config;
            }
          };
          
          module.exports = nextConfig;
          EOL
        # Attempt to trigger SWC patching
        - npx --no-install next info
        # Generate .env file from Amplify environment variables
        - |
          echo "Creating .env file from Amplify environment variables"
          echo "NEXTAUTH_SECRET=$NEXTAUTH_SECRET" >> .env.production
          echo "MONGODB_URI=$MONGODB_URI" >> .env.production
          echo "CLOUDINARY_API_SECRET=$CLOUDINARY_API_SECRET" >> .env.production
          echo "DEEPSEEK_API_KEY=$DEEPSEEK_API_KEY" >> .env.production
          echo "DEEPSEEK_BASE_URL=$DEEPSEEK_BASE_URL" >> .env.production
          echo "LOG_LEVEL=$LOG_LEVEL" >> .env.production
          echo "NEXTAUTH_URL=$NEXTAUTH_URL" >> .env.production
          echo "NEXT_PUBLIC_CLOUDINARY_API_KEY=$NEXT_PUBLIC_CLOUDINARY_API_KEY" >> .env.production
          echo "NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=$NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME" >> .env.production
          echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=$NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY" >> .env.production
          echo "NODE_ENV=production" >> .env.production
          echo ".env.production file created:"
          cat .env.production | grep -v -E "SECRET|KEY|URI" # Don't print sensitive values
        # Create a jsconfig.json file to support path resolution
        - |
          cat > jsconfig.json <<EOL
          {
            "compilerOptions": {
              "baseUrl": ".",
              "paths": {
                "@/*": ["./src/*"]
              }
            }
          }
          EOL
    build:
      commands:
        - echo "Current directory structure:"
        - find src -type f -name "*.ts" -o -name "*.tsx" | sort
        - echo "Contents of next.config.js:"
        - cat next.config.js
        - node custom-build.js
        
        # If the custom script fails, fall back to standard build
        - echo "If custom build failed, trying fallback Next.js build..."
        - |
          # Remove any .babelrc if it exists to use default Next.js configuration
          if [ -f .babelrc ]; then
            echo "Removing .babelrc for fallback build"
            rm .babelrc
          fi
          # Ensure next.config.js exists with minimal configuration
          cat > next.config.js <<'EOL'
          /** @type {import('next').NextConfig} */
          const path = require('path');
          
          const nextConfig = {
            output: 'standalone',
            webpack: (config) => {
              config.resolve.alias = {
                ...config.resolve.alias,
                '@': path.resolve(__dirname, './src'),
              };
              return config;
            }
          };
          
          module.exports = nextConfig;
          EOL
          # Run Next.js build with NODE_PATH
          NODE_PATH=./src npx next build || true
        
        # Verify build output
        - echo "Verifying build output..."
        - ls -la .next/standalone/ # List contents for debugging
        - test -f .next/standalone/required-server-files.json || (echo "required-server-files.json not found!" && exit 1)
        - echo "Build output verified."
  artifacts:
    # Point to the standalone output directory
    baseDirectory: ".next/standalone"
    files:
      - "**/*"
      - "public/**/*"
      - ".next/static/**/*"
  cache:
    paths:
      - node_modules/**/*
      - .next/cache/**/*

# Ensure platform is set correctly for Next.js SSR
platform: "web-compute"

# Keep the environment variable list for SSR functions
nextjsSSR:
  environments:
    - MONGODB_URI
    - NEXTAUTH_SECRET
    - NEXTAUTH_URL
    - STRIPE_SECRET_KEY
    - STRIPE_PUBLISHABLE_KEY
    - STRIPE_WEBHOOK_SECRET
    - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
    - DEEPSEEK_API_KEY
    - DEEPSEEK_BASE_URL
    - NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME
    - NEXT_PUBLIC_CLOUDINARY_API_KEY
    - CLOUDINARY_API_SECRET
    - NODE_ENV 