---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---

# Your rule content

-Guide Line
Make sure the project works in both in local and production(AWS Amplify)
Poduction url is https://main.d2gwwh0jouqtnx.amplifyapp.com/
Don't expose API keys to public
The production site is already in AWS Amplify
Next.js 15.2.2(latest Version) with App Router
TypeScript with strict typing
MongoDB for database
For Subscription, use Stripe 
Database Name is english-learning(alreday created)
Tailwind CSS
Make modern looking website
Cloudinary for image storage
Recharts for graph/charts
The website should be fully Responsive(PC, Tablet and Smartphone)
Since this service is for Japanese, UI should be in Japanese
Use Deepseek chat for AI generate contents
Make sure the code you generate is secure and follows the best practice
Make Re-usable component as much as possible(Don't scatter similar codes everywhere)
Don't edit content of .env.local


- Always look for existing code to iterate on instead of creating new code.
- Do not drastically change the patterns before trying to iterate on existing patterns.
- Always prefer simple solutions
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality
- Write code that takes into account the different environments: local and production
- You are careful to only make changes that are requested or you are confident are well understood and related to the change being requested
- When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old implementation afterwards so we don't have duplicate logic.
- Keep the codebase very clean and organized
- Avoid writing scripts in files if possible, especially if the script is likely only to be run once
- Avoid having files over 200-300 lines of code. Refactor at that point.
- Focus on the areas of code relevant to the task
- Do not touch code that is unrelated to the task
- Write thorough tests for all major functionality
- Avoid making major changes to the patterns and architecture of how a feature works, after it has shown to work well, unless explicitly instructed
- Always think about what other methods and areas of code might be affected by code changes
